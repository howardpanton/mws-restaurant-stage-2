"use strict";var _createClass=function(){function o(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,n,t){return n&&o(e.prototype,n),t&&o(e,t),e}}();function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var registerSW=function(){"serviceWorker"in navigator?navigator.serviceWorker.register("/service-worker.js").then(function(){console.log("Registration complete.")},function(){console.log("Registration failure.")}):console.log("Service worker not supported.")},updateStatus=function(e){var n=document.getElementById("status"),t=navigator.onLine?"online":"offline";"offline"===t?(console.log(t,"status"),n.className=t,n.insertAdjacentHTML("beforeend","Status: Website "+t),n.setAttribute("aria-live","assertive")):"online"===t&&(n.className="",n.innerHTML="",n.removeAttribute("aria-live"))};window.addEventListener("online",updateStatus),window.addEventListener("offline",updateStatus);var DBHelper=function(){function u(){_classCallCheck(this,u)}return _createClass(u,null,[{key:"fetchFromApi",value:function(n,e){var t=new Request(""+u.DATABASE_URL+e,{method:"GET",headers:new Headers({"Content-Type":"application/json"})});fetch(t).then(function(e){200===e.status?e.json().then(function(e){console.log(e),n(null,e)}):console.log("Looks like there was a problem. Status Code: "+e.status)}).catch(function(e){console.log("Fetch Error :-S",e),n("Request failed. Returned "+e,null)})}},{key:"fetchRestaurantById",value:function(o,r){u.fetchRestaurants(function(e,n){if(e)r(e,null);else{var t=n.find(function(e){return e.id==o});t?r(null,t):r("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(e,t){u.fetchRestaurants(function(e,n){e?t(e,null):t(null,results)})}},{key:"fetchRestaurantByNeighborhood",value:function(e,t){u.fetchRestaurants(function(e,n){e?t(e,null):t(null,results)})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(o,r,a){u.fetchRestaurants(function(e,n){if(e)console.log("error from db"),a(e,null);else{console.log(n,"restaurant");var t=n;"all"!=o&&(t=t.filter(function(e){return e.cuisine_type==o})),"all"!=r&&(t=t.filter(function(e){return e.neighborhood==r})),a(null,t)}})}},{key:"fetchNeighborhoods",value:function(r){u.fetchRestaurants(function(e,t){if(e)r(e,null);else{var o=t.map(function(e,n){return t[n].neighborhood}),n=o.filter(function(e,n){return o.indexOf(e)==n});r(null,n)}})}},{key:"fetchCuisines",value:function(r){u.fetchRestaurants(function(e,t){if(e)r(e,null);else{var o=t.map(function(e,n){return t[n].cuisine_type}),n=o.filter(function(e,n){return o.indexOf(e)==n});r(null,n)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.photograph.replace(/\.jpg$/,".webp")}},{key:"mapMarkerForRestaurant",value:function(e,n){return new google.maps.Marker({position:e.latlng,title:e.name,url:u.urlForRestaurant(e),map:n,animation:google.maps.Animation.DROP})}},{key:"onWindowResize",value:function(){var e=document.body.clientWidth,n="";return 1024<=e?n="lrg-desktop":768<=e?n="desktop":425<=e?n="mobile-l":375<=e?n="mobile-m":320<=e&&(n="mobile-s"),document.body.className="",document.body.classList.add(n),n}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/api/v1/restaurants"}}]),u}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
